@model ENI_Projet_Sport.ViewModels.CreateEditRaceViewModel

@{
    ViewBag.Title = "Ajouter une course";
}
<style>
    #mapid {
        height: 300px;
    }
</style>
<h2>Ajouter une course</h2>


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>
        
        <div class="form-group">
            @Html.LabelFor(model => model.DateRace, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DateRace, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DateRace, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PlacesNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PlacesNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PlacesNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ZipCode, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ZipCode, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ZipCode, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.RaceTypeId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.RaceTypeId, Model.RacesType, "-----")
                @Html.ValidationMessageFor(model => model.RaceTypeId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div id="mapid"></div>
        @Html.ValidationMessageFor(model => model.POIs, "", new { @class = "text-danger" })

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="button" value="Ajouter" class="btn btn-default" onclick="send_to_controller();"/>
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Retour à la liste", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<script>
    var stringArray = @Html.Raw(Json.Encode(Model.POIs));
    var mymap = L.map('mapid').setView([(stringArray[0] && stringArray[0].Latitude) || 47.2184, (stringArray[0] && stringArray[0].Longitude) || 1.5536], 13);

    L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw', {
        maxZoom: 18,
        attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, ' +
            '<a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' +
            'Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
        id: 'mapbox.streets'
    }).addTo(mymap);

    var waypoints = [];
    stringArray.forEach(function (poi){
        waypoints.push(L.latLng(poi.Latitude, poi.Longitude));
    });

    var routeControl = L.Routing.control({
        waypoints: waypoints,
        routeWhileDragging: false,
        geocoder: L.Control.Geocoder.nominatim()
    }).addTo(mymap);

    function send_to_controller(){
        var POIs = []

        routeControl.getWaypoints().forEach(function(poi){
            if(poi.latLng!=null){
                POIs.push({
                    Latitude: poi.latLng.lat.toString().replace('.', ','),
                    Longitude: poi.latLng.lng.toString().replace('.', ','),
                    CategoryPOI: { ID: 0, Name: "Départ", DateMAJ : '2010-10-10'}
                });
            }
        });
        if(POIs.length < 2){
            $.alert({
                title: 'Attention!',
                content: 'Veuillez selectionner au minimum 2 POI.',
            });
        }
        else{
            var raceVM = {
                Name: $("#Name").val(),
                DateRace: $("#DateRace").val(),
                PlacesNumber: $("#PlacesNumber").val(),
                City: $("#City").val(),
                ZipCode: $("#ZipCode").val(),
                Price: $("#Price").val(),
                Description: $("#Description").val(),    
                RaceTypeId: $("#RaceTypeId").val(),
                Distance: get_total_distance(),
                POIs: POIs,
            }
        
            $.ajax({
                type: "POST",
                url: "/Races/Create",
                data: raceVM,
                dataType: "application/json",
                complete: function(data){
                    if(data.status == 200){
                        document.location.href = '/Races';
                    }
                    else{
                        var obj = JSON.parse(data.statusText);
                        obj.forEach(function(error){
                            var span = $('span[data-valmsg-for="'+error.Key+'"]')[0];
                            $(span).html(error.Value);
                            $('#'+error.Key).on('change', function(){
                                $(span).html('');
                            });
                        });
                        $.alert({
                            title: 'Erreur!',
                            content: 'Une erreur est survenue, veuillez vérifier chaque champ du formulaire.',
                        });
                    }
                }
            });
        }
    }

    function get_total_distance(){
        if(routeControl._routes!=null){
            return routeControl._routes[0].summary.totalDistance.toString().replace('.', ',');
        }
        return 0;
    }
</script>
